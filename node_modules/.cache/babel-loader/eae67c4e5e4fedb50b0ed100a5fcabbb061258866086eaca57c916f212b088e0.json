{"ast":null,"code":"import { sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\n   * TODO: Unify with js/index\n   */\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Create a new finished Promise every time we enter the\n   * finished state and resolve the old Promise. This is\n   * WAAPI-compatible behaviour.\n   */\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  let {\n    keyframes,\n    duration = 300,\n    ease,\n    times\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({\n      ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    times = undefined;\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, {\n    ...options,\n    duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease,\n    times\n  });\n  const safeCancel = () => {\n    sync.update(() => animation.cancel());\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    onComplete && onComplete();\n    safeCancel();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n    get speed() {\n      return animation.playbackRate;\n    },\n    set speed(newSpeed) {\n      animation.playbackRate = newSpeed;\n    },\n    get duration() {\n      return millisecondsToSeconds(duration);\n    },\n    play: () => {\n      if (hasStopped) return;\n      animation.play();\n    },\n    pause: () => animation.pause(),\n    stop: () => {\n      hasStopped = true;\n      if (animation.playState === \"idle\") return;\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      const {\n        currentTime\n      } = animation;\n      if (currentTime) {\n        const sampleAnimation = animateValue({\n          ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      safeCancel();\n    },\n    complete: () => animation.finish(),\n    cancel: safeCancel\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","onUpdate","onComplete","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","keyframes","duration","times","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","undefined","animation","owner","current","safeCancel","update","cancel","onfinish","set","then","reject","time","currentTime","newTime","speed","playbackRate","newSpeed","play","pause","stop","playState","autoplay","setWithVelocity","complete","finish"],"sources":["C:/Users/Adminstrator/Downloads/React Js/portfolio_first/my_portfolio/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../../frameloop/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Create a new finished Promise every time we enter the\n     * finished state and resolve the old Promise. This is\n     * WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    const safeCancel = () => {\n        sync.update(() => animation.cancel());\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}